


//MoveLeftUp Subroutine
//Moves the ball diagonally left & up on the screen 
//Input: None
//Returns nothing
.global MoveLeftUp
MoveLeftUp:
	push	{r4-r5, lr}		//Store registers and lr to the stack

	ldr	r2, =ballData		//Balls leftmost value address
	ldrh	r4, [r2]		//Balls leftmost value
	sub	r4, #8			//Move left
	strh	r4, [r2]		//Update value in memory
	
	ldrh	r5, [r2, #4]		//Balls top y value
	sub	r5, #8			//Move up
	strh	r5, [r2, #4]		//Update value in memory

	mov	r0, r4			//Move leftmost x value
	mov	r1, r5			//Move topmost y value
	bl	drawBall		//Draw ball in new position

	mov	r0, r4			//Move leftmost x value
	mov	r1, r5			//Move top most y value
	bl	UpdateBallPosition	//Update ball position markers in memory
	

	pop	{r4-r5, lr}		//Pop registers and lr from the stack
	bx	lr			//Return to calling code





//MoveLeftDown Subroutine
//Moves the ball diagonally left & down on the screen 
//Input: None
//Returns nothing
.global MoveLeftDown
MoveLeftDown:
	push	{r4-r5, lr}		//Store registers and lr to the stack

	ldr	r2, =ballData		//Balls leftmost value address
	ldrh	r4, [r2]		//Balls leftmost value
	sub	r4, #8			//Move left
	strh	r4, [r2]		//Update value in memory
	
	ldrh	r5, [r2, #4]		//Balls top y value
	add	r5, #8			//Move down
	strh	r5, [r2, #4]		//Update value in memory

	mov	r0, r4			//Move leftmost x value
	mov	r1, r5			//Move topmost y value
	bl	drawBall		//Draw ball in new position

	mov	r0, r4			//Move leftmost x value
	mov	r1, r5			//Move top most y value
	bl	UpdateBallPosition	//Update ball position markers in memory
	

	pop	{r4-r5, lr}		//Pop registers and lr from the stack
	bx	lr			//Return to calling code 




//MoveRightDown Subroutine
//Moves the ball diagonally righ & down on the screen 
//Input: None
//Returns nothing
.global MoveRightDown
MoveRightDown:
	push	{r4-r5, lr}		//Store registers and lr to the stack

	ldr	r1, =ballData		//Balls leftmost value address
	ldrh	r4, [r1]		//Balls leftmost value
	add	r4, #8			//Move right
	strh	r4, [r1]		//Update value in memory
	
	ldrh	r5, [r1, #4]		//Balls top y value
	add	r5, #8			//Move down
	strh	r5, [r1, #4]		//Update value in memory

	mov	r0, r4			//Move leftmost x value
	mov	r1, r5			//Move topmost y value
	bl	drawBall		//Draw ball in new position

	mov	r0, r4			//Move leftmost x value
	mov	r1, r5			//Move top most y value
	bl	UpdateBallPosition	//Update ball position markers in memory
	

	pop	{r4-r5, lr}		//Pop registers and lr from the stack
	bx	lr			//Return to calling code




//MoveRightUp Subroutine
//Moves the ball diagonally right & up on the screen 
//Input: None
//Returns nothing
.global MoveRightUp
MoveRightUp:
	push	{r4-r5, lr}		//Store registers and lr to the stack

	ldr	r1, =ballData		//Balls leftmost value address
	ldrh	r4, [r1]		//Balls leftmost value
	add	r4, #8			//Move right
	strh	r4, [r1]		//Update value in memory
	
	ldrh	r5, [r1, #4]		//Balls top y value
	sub	r5, #8			//Move up
	strh	r5, [r1, #4]		//Update value in memory

	mov	r0, r4			//Move leftmost x value
	mov	r1, r5			//Move topmost y value
	bl	drawBall		//Draw ball in new position

	mov	r0, r4			//Move leftmost x value
	mov	r1, r5			//Move top most y value
	bl	UpdateBallPosition	//Update ball position markers in memory
	

	pop	{r4-r5, lr}		//Pop registers and lr from the stack
	bx	lr			//Return to calling code